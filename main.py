import psycopg2
import random
import aiohttp
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from datetime import datetime, time, timedelta
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
ADMIN_ID = 486000906
REQUEST_LIMIT = 60  # –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
REQUEST_WINDOW = 60  # –û–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (—Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ Render)
DB_CONN_STRING = os.getenv('DB_CONN_STRING', 'postgresql://loli_db_user:UxaiJ1HL8xZp67mf1zzEikqFzvgH57Ch@dpg-cusbuba3esus73flt5qg-a/loli_db')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = psycopg2.connect(DB_CONN_STRING)
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS books 
                 (id TEXT PRIMARY KEY, title TEXT, description TEXT, genres TEXT, cover_url TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS user_read 
                 (user_id BIGINT, book_id TEXT, rating INTEGER, PRIMARY KEY (user_id, book_id))''')
    c.execute('''CREATE TABLE IF NOT EXISTS user_favorites 
                 (user_id BIGINT, book_id TEXT, PRIMARY KEY (user_id, book_id))''')
    c.execute('''CREATE TABLE IF NOT EXISTS users 
                 (user_id BIGINT PRIMARY KEY, username TEXT, agreed INTEGER DEFAULT 0, banned_until BIGINT DEFAULT 0, ban_reason TEXT, requests INTEGER DEFAULT 0, last_request BIGINT DEFAULT 0)''')
    c.execute('''CREATE TABLE IF NOT EXISTS search_history 
                 (user_id BIGINT, query TEXT, timestamp BIGINT)''')
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(user_id):
    keyboard = [
        [InlineKeyboardButton("üìö –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É", callback_data='search_genre'),
         InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏", callback_data='search_title')],
        [InlineKeyboardButton("üìñ –î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", callback_data='add_read'),
         InlineKeyboardButton("‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='add_favorite')],
        [InlineKeyboardButton("üìú –ú–æ–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", callback_data='show_read'),
         InlineKeyboardButton("‚≠ê –ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ", callback_data='show_favorites')],
        [InlineKeyboardButton("‚úçÔ∏è –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É", callback_data='search_author')]
    ]
    if user_id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])
    return InlineKeyboardMarkup(keyboard)

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ –∑–≤—ë–∑–¥–æ—á–∫–∏
def rating_to_stars(rating):
    if rating is None:
        return "‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ"
    return "‚òÖ" * rating + "‚òÜ" * (5 - rating)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
def check_rate_limit(user_id):
    conn = psycopg2.connect(DB_CONN_STRING)
    c = conn.cursor()
    c.execute("SELECT requests, last_request FROM users WHERE user_id = %s", (user_id,))
    user = c.fetchone()
    current_time = int(time.time())
    
    if not user or current_time - user[1] > REQUEST_WINDOW:
        c.execute("INSERT INTO users (user_id, requests, last_request) VALUES (%s, 1, %s) ON CONFLICT (user_id) DO UPDATE SET requests = 1, last_request = %s", 
                  (user_id, current_time, current_time))
        conn.commit()
        conn.close()
        return True
    
    requests, last_request = user
    if requests < REQUEST_LIMIT:
        c.execute("UPDATE users SET requests = requests + 1 WHERE user_id = %s", (user_id,))
        conn.commit()
        conn.close()
        return True
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
    conn.close()
    return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –∏ –±–∞–Ω–∞
async def check_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if isinstance(update, Update) and update.callback_query:
        user_id = update.callback_query.from_user.id
        message = update.callback_query.message
    else:
        user_id = update.message.from_user.id
        message = update.message
    
    if not check_rate_limit(user_id):
        await message.reply_text("üö´ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (60 –≤ –º–∏–Ω—É—Ç—É). –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ!", parse_mode=ParseMode.MARKDOWN)
        return False
    
    conn = psycopg2.connect(DB_CONN_STRING)
    c = conn.cursor()
    c.execute("SELECT agreed, banned_until, ban_reason FROM users WHERE user_id = %s", (user_id,))
    user = c.fetchone()
    conn.close()
    
    if not user:  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        return True
    if user[1] and user[1] > int(time.time()):  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω
        await message.reply_text(f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {datetime.fromtimestamp(user[1]).strftime('%Y-%m-%d %H:%M:%S')}.\n*–ü—Ä–∏—á–∏–Ω–∞:* {user[2]}", parse_mode=ParseMode.MARKDOWN)
        return False
    if user[0] == 1:  # –£–∂–µ —Å–æ–≥–ª–∞—Å–µ–Ω
        return True
    return False

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    
    conn = psycopg2.connect(DB_CONN_STRING)
    c = conn.cursor()
    c.execute("INSERT INTO users (user_id, username) VALUES (%s, %s) ON CONFLICT (user_id) DO NOTHING", (user_id, username))
    c.execute("SELECT agreed FROM users WHERE user_id = %s", (user_id,))
    agreed = c.fetchone()[0]
    conn.commit()
    conn.close()
    
    if not agreed:
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data='agree_policy'),
             InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑", callback_data='refuse_policy')]
        ]
        await update.message.reply_text("üìú *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞*\n(–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑):", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
    else:
        await update.message.reply_text("üìö *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∫–Ω–∏–≥!*\n–Ø –∏—Å–ø–æ–ª—å–∑—É—é Open Library –¥–ª—è –ø–æ–∏—Å–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)

# –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ Open Library API
async def search_book_by_title_or_genre(query, is_genre=False, author=None):
    async with aiohttp.ClientSession() as session:
        if is_genre:
            url = f"https://openlibrary.org/subjects/{query.lower().replace(' ', '_')}.json?limit=1&sort=random"
        elif author:
            url = f"https://openlibrary.org/search.json?author={query.replace(' ', '+')}&limit=1"
        else:
            url = f"https://openlibrary.org/search.json?q={query.replace(' ', '+')}&limit=1"
        async with session.get(url) as response:
            if response.status != 200:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}")
                return None
            data = await response.json()
            works = data.get('works') if is_genre else data.get('docs')
            if not works:
                return None
            
            work = works[0]
            book_id = work['key'].split('/')[-1] if is_genre else work['key'].split('/')[-1]
            title = work.get('title', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            detail_url = f"https://openlibrary.org/works/{book_id}.json"
            async with session.get(detail_url) as detail_response:
                if detail_response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏: {detail_response.status}")
                    return None
                detail_data = await detail_response.json()
                description = detail_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è') if isinstance(detail_data.get('description'), str) else '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
                genres = ','.join(work.get('subject', ['–ù–µ—Ç –∂–∞–Ω—Ä–æ–≤']))
                cover_id = work.get('cover_id') if is_genre else work.get('cover_i')
                cover_url = f"https://covers.openlibrary.org/b/id/{cover_id}-L.jpg" if cover_id else "https://via.placeholder.com/150"
                
                return {'id': book_id, 'title': title, 'description': description, 'genres': genres, 'cover_url': cover_url}
    return None

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
def cache_book(book):
    conn = psycopg2.connect(DB_CONN_STRING)
    c = conn.cursor()
    c.execute("INSERT INTO books (id, title, description, genres, cover_url) VALUES (%s, %s, %s, %s, %s) ON CONFLICT (id) DO NOTHING",
              (book['id'], book['title'], book['description'], book['genres'], book['cover_url']))
    conn.commit()
    conn.close()

# –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è PostgreSQL –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ)
async def backup_database(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ë—ç–∫–∞–ø –¥–ª—è PostgreSQL –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

# –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def reset_database(user_id=None):
    conn = psycopg2.connect(DB_CONN_STRING)
    c = conn.cursor()
    if user_id:
        c.execute("DELETE FROM user_read WHERE user_id = %s", (user_id,))
        c.execute("DELETE FROM user_favorites WHERE user_id = %s", (user_id,))
        c.execute("DELETE FROM users WHERE user_id = %s", (user_id,))
        c.execute("DELETE FROM search_history WHERE user_id = %s", (user_id,))
    else:
        c.execute("TRUNCATE TABLE books, user_read, user_favorites, users, search_history RESTART IDENTITY")
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: {query.data} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if query.data in ['agree_policy', 'refuse_policy']:
        if query.data == 'agree_policy':
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            c.execute("UPDATE users SET agreed = 1 WHERE user_id = %s", (user_id,))
            conn.commit()
            conn.close()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π")
            await query.message.reply_text("‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!*\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç.", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
        elif query.data == 'refuse_policy':
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏")
            await query.message.reply_text("‚ùå *–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏.*\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        return

    if not await check_user(update, context):
        return
    
    try:
        if query.data == 'search_genre':
            await query.message.reply_text("üìö –£–∫–∞–∂–∏ –∂–∞–Ω—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, *–§—ç–Ω—Ç–µ–∑–∏*):", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'search_genre'
        elif query.data == 'search_title':
            await query.message.reply_text("üîç –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'search_title'
        elif query.data == 'search_author':
            await query.message.reply_text("‚úçÔ∏è –£–∫–∞–∂–∏ –∏–º—è –∞–≤—Ç–æ—Ä–∞:", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'search_author'
        elif query.data == 'add_read':
            await query.message.reply_text("üìñ –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ:", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'add_read'
        elif query.data == 'add_favorite':
            await query.message.reply_text("‚ù§Ô∏è –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'add_favorite'
        elif query.data == 'show_read':
            await show_read(query, context, page=1)
        elif query.data == 'show_favorites':
            await show_favorites(query, context, page=1)
        elif query.data.startswith('page_read_'):
            page = int(query.data.split('_')[2])
            await show_read(query, context, page)
        elif query.data.startswith('page_favorites_'):
            page = int(query.data.split('_')[2])
            await show_favorites(query, context, page)
        elif query.data == 'add_found_to_read':
            book = context.user_data.get('last_found_book')
            if book:
                conn = psycopg2.connect(DB_CONN_STRING)
                c = conn.cursor()
                c.execute("INSERT INTO user_read (user_id, book_id) VALUES (%s, %s) ON CONFLICT DO NOTHING", (user_id, book['id']))
                conn.commit()
                conn.close()
                await query.message.reply_text(f"üìñ –ö–Ω–∏–≥–∞ *{book['title']}* –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ */search*!", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
        elif query.data == 'add_found_to_favorite':
            book = context.user_data.get('last_found_book')
            if book:
                conn = psycopg2.connect(DB_CONN_STRING)
                c = conn.cursor()
                c.execute("INSERT INTO user_favorites (user_id, book_id) VALUES (%s, %s) ON CONFLICT DO NOTHING", (user_id, book['id']))
                conn.commit()
                conn.close()
                await query.message.reply_text(f"‚ù§Ô∏è –ö–Ω–∏–≥–∞ *{book['title']}* –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ */search*!", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
        elif query.data.startswith('list_action_'):
            action, list_type = query.data.split('_')[2], query.data.split('_')[3]
            context.user_data['list_action'] = action
            context.user_data['list_type'] = list_type
            await query.message.reply_text("üî¢ –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ (1, 2, 3...) –∏–ª–∏ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ:", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'list_action_select'
        elif query.data.startswith('rate_'):
            _, book_id, rating = query.data.split('_')
            rating = int(rating)
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            c.execute("UPDATE user_read SET rating = %s WHERE user_id = %s AND book_id = %s", (rating, user_id, book_id))
            if c.rowcount == 0:
                c.execute("INSERT INTO user_read (user_id, book_id, rating) VALUES (%s, %s, %s) ON CONFLICT DO NOTHING", (user_id, book_id, rating))
            conn.commit()
            conn.close()
            await query.message.reply_text(f"‚≠ê –û—Ü–µ–Ω–∫–∞ {rating}‚òÖ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
        elif query.data == 'main_menu':
            await query.message.reply_text("üîô *–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
        elif query.data == 'admin_panel':
            if user_id == ADMIN_ID:
                keyboard = [
                    [InlineKeyboardButton("‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast'),
                     InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='admin_ban')],
                    [InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data='admin_unban'),
                     InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
                    [InlineKeyboardButton("üìú –õ–æ–≥–∏", callback_data='admin_logs'),
                     InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—ç–∫–∞–ø", callback_data='admin_restore')],
                    [InlineKeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å –±–∞–∑—ã", callback_data='admin_reset_all'),
                     InlineKeyboardButton("üë§ –°–±—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='admin_reset_user')],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                ]
                await query.message.reply_text("üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:*", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
        elif query.data == 'admin_broadcast':
            await query.message.reply_text("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'admin_broadcast_message'
        elif query.data == 'admin_ban':
            await query.message.reply_text("üö´ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'admin_ban_id'
        elif query.data == 'admin_unban':
            await query.message.reply_text("‚úÖ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'admin_unban_id'
        elif query.data == 'admin_stats':
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            c.execute("SELECT COUNT(*) FROM users")
            user_count = c.fetchone()[0]
            c.execute("SELECT COUNT(*) FROM books")
            book_count = c.fetchone()[0]
            c.execute("SELECT AVG(rating) FROM user_read WHERE rating IS NOT NULL")
            avg_rating = c.fetchone()[0]
            conn.close()
            avg_rating = f"{avg_rating:.2f}‚òÖ" if avg_rating else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
            await query.message.reply_text(f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n- –ö–Ω–∏–≥ –≤ –±–∞–∑–µ: {book_count}\n- –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating}", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
        elif query.data == 'admin_logs':
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            c.execute("SELECT user_id FROM users ORDER BY user_id LIMIT 5")
            users = c.fetchall()
            conn.close()
            log_text = "üìú *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n"
            for uid in users:
                log_text += f"- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid[0]}\n"
            await query.message.reply_text(log_text, reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
        elif query.data == 'admin_restore':
            await query.message.reply_text("üîÑ *–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è PostgreSQL –Ω–∞–ø—Ä—è–º—É—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–º–ø –±–∞–∑—ã —á–µ—Ä–µ–∑ Render.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
        elif query.data == 'admin_reset_all':
            reset_database()
            await query.message.reply_text("üóëÔ∏è *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω–∞.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
        elif query.data == 'admin_reset_user':
            await query.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö:", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'admin_reset_user_id'
        elif query.data == 'select_book_read':
            await query.message.reply_text("üî¢ –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ (1, 2, 3...):", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'select_book_read'
        elif query.data == 'select_book_favorite':
            await query.message.reply_text("üî¢ –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (1, 2, 3...):", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'select_book_favorite'
        elif query.data == 'back_to_select_read':
            await show_read(query, context, page=1)
        elif query.data == 'back_to_select_favorite':
            await show_favorites(query, context, page=1)
        elif query.data == 'edit_book':
            await query.message.reply_text("üìù –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'edit_book_select'
        elif query.data == 'export_read':
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            c.execute("SELECT b.title, ur.rating FROM user_read ur JOIN books b ON ur.book_id = b.id WHERE ur.user_id = %s", (user_id,))
            books = c.fetchall()
            conn.close()
            if books:
                export_text = "üìñ *–í–∞—à–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:*\n"
                for i, (title, rating) in enumerate(books, 1):
                    export_text += f"{i}. {title} - {rating_to_stars(rating)}\n"
                with open(f'read_export_{user_id}.txt', 'w', encoding='utf-8') as f:
                    f.write(export_text.replace('*', ''))
                await context.bot.send_document(chat_id=user_id, document=open(f'read_export_{user_id}.txt', 'rb'), filename=f"read_export_{user_id}.txt")
                os.remove(f'read_export_{user_id}.txt')
            else:
                await query.message.reply_text("üìñ *–°–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
        elif query.data == 'export_favorites':
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            c.execute("SELECT b.title FROM user_favorites uf JOIN books b ON uf.book_id = b.id WHERE uf.user_id = %s", (user_id,))
            books = c.fetchall()
            conn.close()
            if books:
                export_text = "‚≠ê *–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:*\n"
                for i, (title,) in enumerate(books, 1):
                    export_text += f"{i}. {title}\n"
                with open(f'favorites_export_{user_id}.txt', 'w', encoding='utf-8') as f:
                    f.write(export_text.replace('*', ''))
                await context.bot.send_document(chat_id=user_id, document=open(f'favorites_export_{user_id}.txt', 'rb'), filename=f"favorites_export_{user_id}.txt")
                os.remove(f'favorites_export_{user_id}.txt')
            else:
                await query.message.reply_text("‚≠ê *–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button: {e}")
        await query.message.reply_text("‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    state = context.user_data.get('state')
    user_id = update.message.from_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {state} –æ—Ç {user_id}")
    
    if not await check_user(update, context):
        return
    
    try:
        if state == 'search_genre':
            msg = await update.message.reply_text("‚è≥ *–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏...*", parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(1)
            book = await search_book_by_title_or_genre(text, is_genre=True)
            if book:
                cache_book(book)
                context.user_data['last_found_book'] = book
                conn = psycopg2.connect(DB_CONN_STRING)
                c = conn.cursor()
                c.execute("INSERT INTO search_history (user_id, query, timestamp) VALUES (%s, %s, %s)", (user_id, text, int(time.time())))
                conn.commit()
                conn.close()
                keyboard = [
                    [InlineKeyboardButton("üìñ –î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", callback_data='add_found_to_read'),
                     InlineKeyboardButton("‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='add_found_to_favorite')],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                ]
                await update.message.reply_photo(
                    photo=book['cover_url'],
                    caption=f"**{book['title']}**\n\n_{book['description']}_\n\n*–ñ–∞–Ω—Ä—ã:* {book['genres']}",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text("üìö *–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ */search*!", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            await msg.delete()
        
        elif state == 'search_title':
            msg = await update.message.reply_text("‚è≥ *–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏...*", parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(1)
            book = await search_book_by_title_or_genre(text)
            if book:
                cache_book(book)
                context.user_data['last_found_book'] = book
                conn = psycopg2.connect(DB_CONN_STRING)
                c = conn.cursor()
                c.execute("INSERT INTO search_history (user_id, query, timestamp) VALUES (%s, %s, %s)", (user_id, text, int(time.time())))
                conn.commit()
                conn.close()
                keyboard = [
                    [InlineKeyboardButton("üìñ –î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", callback_data='add_found_to_read'),
                     InlineKeyboardButton("‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='add_found_to_favorite')],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                ]
                await update.message.reply_photo(
                    photo=book['cover_url'],
                    caption=f"**{book['title']}**\n\n_{book['description']}_\n\n*–ñ–∞–Ω—Ä—ã:* {book['genres']}",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text("üìö *–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*\n–£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:", parse_mode=ParseMode.MARKDOWN)
                context.user_data['manual_title'] = text
                context.user_data['manual_list'] = 'title'
                context.user_data['state'] = 'manual_description'
            await msg.delete()
        
        elif state == 'search_author':
            msg = await update.message.reply_text("‚è≥ *–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏...*", parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(1)
            book = await search_book_by_title_or_genre(text, author=True)
            if book:
                cache_book(book)
                context.user_data['last_found_book'] = book
                conn = psycopg2.connect(DB_CONN_STRING)
                c = conn.cursor()
                c.execute("INSERT INTO search_history (user_id, query, timestamp) VALUES (%s, %s, %s)", (user_id, text, int(time.time())))
                conn.commit()
                conn.close()
                keyboard = [
                    [InlineKeyboardButton("üìñ –î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", callback_data='add_found_to_read'),
                     InlineKeyboardButton("‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='add_found_to_favorite')],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                ]
                await update.message.reply_photo(
                    photo=book['cover_url'],
                    caption=f"**{book['title']}**\n\n_{book['description']}_\n\n*–ñ–∞–Ω—Ä—ã:* {book['genres']}",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text("üìö *–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ */search*!", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            await msg.delete()
        
        elif state == 'add_read':
            msg = await update.message.reply_text("‚è≥ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏...*", parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(1)
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            c.execute("SELECT id FROM books WHERE title ILIKE %s", (f'%{text}%',))
            book = c.fetchone()
            if book:
                c.execute("INSERT INTO user_read (user_id, book_id) VALUES (%s, %s) ON CONFLICT DO NOTHING", (user_id, book[0]))
                conn.commit()
                await update.message.reply_text(f"üìñ –ö–Ω–∏–≥–∞ *{text}* –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ */read*!", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            else:
                book = await search_book_by_title_or_genre(text)
                if book:
                    cache_book(book)
                    c.execute("INSERT INTO user_read (user_id, book_id) VALUES (%s, %s) ON CONFLICT DO NOTHING", (user_id, book['id']))
                    conn.commit()
                    await update.message.reply_text(f"üìñ –ö–Ω–∏–≥–∞ *{text}* –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ */read*!", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
                else:
                    context.user_data['manual_title'] = text
                    context.user_data['manual_list'] = 'read'
                    await update.message.reply_text("üìö *–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*\n–£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:", parse_mode=ParseMode.MARKDOWN)
                    context.user_data['state'] = 'manual_description'
            conn.close()
            await msg.delete()
        
        elif state == 'add_favorite':
            msg = await update.message.reply_text("‚è≥ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏...*", parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(1)
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            c.execute("SELECT id FROM books WHERE title ILIKE %s", (f'%{text}%',))
            book = c.fetchone()
            if book:
                c.execute("INSERT INTO user_favorites (user_id, book_id) VALUES (%s, %s) ON CONFLICT DO NOTHING", (user_id, book[0]))
                conn.commit()
                await update.message.reply_text(f"‚ù§Ô∏è –ö–Ω–∏–≥–∞ *{text}* –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ */favorites*!", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            else:
                book = await search_book_by_title_or_genre(text)
                if book:
                    cache_book(book)
                    c.execute("INSERT INTO user_favorites (user_id, book_id) VALUES (%s, %s) ON CONFLICT DO NOTHING", (user_id, book['id']))
                    conn.commit()
                    await update.message.reply_text(f"‚ù§Ô∏è –ö–Ω–∏–≥–∞ *{text}* –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ */favorites*!", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
                else:
                    context.user_data['manual_title'] = text
                    context.user_data['manual_list'] = 'favorite'
                    await update.message.reply_text("üìö *–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*\n–£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:", parse_mode=ParseMode.MARKDOWN)
                    context.user_data['state'] = 'manual_description'
            conn.close()
            await msg.delete()
        
        elif state == 'manual_description':
            context.user_data['manual_description'] = text
            await update.message.reply_text("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –æ–±–ª–æ–∂–∫–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ):", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'manual_cover'
        
        elif state == 'manual_cover':
            msg = await update.message.reply_text("‚è≥ *–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–Ω–∏–≥–∏...*", parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(1)
            title = context.user_data['manual_title']
            description = context.user_data['manual_description']
            list_type = context.user_data['manual_list']
            if update.message.photo:
                cover_url = update.message.photo[-1].file_id
            elif text.lower() == '–Ω–µ—Ç':
                cover_url = "https://via.placeholder.com/150"
            else:
                await update.message.reply_text("üì∑ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
                await msg.delete()
                return
            
            book_id = f"manual_{user_id}_{int(time.time())}"
            book = {'id': book_id, 'title': title, 'description': description, 'genres': '–ù–µ —É–∫–∞–∑–∞–Ω—ã', 'cover_url': cover_url}
            cache_book(book)
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            if list_type == 'read':
                c.execute("INSERT INTO user_read (user_id, book_id) VALUES (%s, %s) ON CONFLICT DO NOTHING", (user_id, book_id))
            else:
                c.execute("INSERT INTO user_favorites (user_id, book_id) VALUES (%s, %s) ON CONFLICT DO NOTHING", (user_id, book_id))
            conn.commit()
            conn.close()
            await update.message.reply_text(f"üìö –ö–Ω–∏–≥–∞ *{title}* –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ {list_type == 'read' and '–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ' or '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ */{'read' if list_type == 'read' else 'favorites'}*!", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            await msg.delete()
            context.user_data['state'] = None
        
        elif state == 'list_action_select':
            msg = await update.message.reply_text("‚è≥ *–û–±—Ä–∞–±–æ—Ç–∫–∞...*", parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(1)
            action = context.user_data['list_action']
            list_type = context.user_data['list_type']
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            if list_type == 'read':
                c.execute("SELECT b.id, b.title FROM user_read ur JOIN books b ON ur.book_id = b.id WHERE ur.user_id = %s", (user_id,))
            else:
                c.execute("SELECT b.id, b.title FROM user_favorites uf JOIN books b ON uf.book_id = b.id WHERE uf.user_id = %s", (user_id,))
            books = c.fetchall()
            conn.close()
            
            try:
                index = int(text) - 1
                if 0 <= index < len(books):
                    book_id = books[index][0]
                else:
                    raise ValueError
            except ValueError:
                book_id = next((b[0] for b in books if text.lower() in b[1].lower()), None)
                if not book_id:
                    await update.message.reply_text("üìö *–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
                    await msg.delete()
                    return
            
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            if action == 'rate':
                keyboard = [[InlineKeyboardButton(f"{i}‚òÖ", callback_data=f'rate_{book_id}_{i}') for i in range(1, 6)]]
                await update.message.reply_text("‚≠ê *–í—ã–±–µ—Ä–∏ –æ—Ü–µ–Ω–∫—É:*", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
            elif action == 'delete':
                if list_type == 'read':
                    c.execute("DELETE FROM user_read WHERE user_id = %s AND book_id = %s", (user_id, book_id))
                else:
                    c.execute("DELETE FROM user_favorites WHERE user_id = %s AND book_id = %s", (user_id, book_id))
                conn.commit()
                await update.message.reply_text(f"üóëÔ∏è –ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ {list_type == 'read' and '–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ' or '–∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ'}.", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            elif action == 'move':
                if list_type == 'read':
                    c.execute("INSERT INTO user_favorites (user_id, book_id) VALUES (%s, %s) ON CONFLICT DO NOTHING", (user_id, book_id))
                else:
                    c.execute("INSERT INTO user_read (user_id, book_id) VALUES (%s, %s) ON CONFLICT DO NOTHING", (user_id, book_id))
                conn.commit()
                await update.message.reply_text(f"‚û°Ô∏è –ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ {list_type == 'read' and '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ' or '–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ'}.", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            conn.close()
            await msg.delete()
            context.user_data['state'] = None
        
        elif state == 'select_book_read':
            msg = await update.message.reply_text("‚è≥ *–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏...*", parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(1)
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            c.execute("SELECT b.id, b.title, b.description, b.genres, b.cover_url, ur.rating FROM user_read ur JOIN books b ON ur.book_id = b.id WHERE ur.user_id = %s", (user_id,))
            books = c.fetchall()
            conn.close()
            
            try:
                index = int(text) - 1
                if 0 <= index < len(books):
                    book_id, title, description, genres, cover_url, rating = books[index]
                    keyboard = [
                        [InlineKeyboardButton("‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='list_action_move_read'),
                         InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data='list_action_rate_read')],
                        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit_book_{book_id}'),
                         InlineKeyboardButton("üîç –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é", callback_data='back_to_select_read')],
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                    ]
                    await update.message.reply_photo(
                        photo=cover_url,
                        caption=f"**{title}**\n\n_{description}_\n\n*–ñ–∞–Ω—Ä—ã:* {genres}\n*–û—Ü–µ–Ω–∫–∞:* {rating_to_stars(rating)}",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    await update.message.reply_text("‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            except ValueError:
                await update.message.reply_text("‚ùå *–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            await msg.delete()
            context.user_data['state'] = None
        
        elif state == 'select_book_favorite':
            msg = await update.message.reply_text("‚è≥ *–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏...*", parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(1)
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            c.execute("SELECT b.id, b.title, b.description, b.genres, b.cover_url FROM user_favorites uf JOIN books b ON uf.book_id = b.id WHERE uf.user_id = %s", (user_id,))
            books = c.fetchall()
            conn.close()
            
            try:
                index = int(text) - 1
                if 0 <= index < len(books):
                    book_id, title, description, genres, cover_url = books[index]
                    conn = psycopg2.connect(DB_CONN_STRING)
                    c = conn.cursor()
                    c.execute("SELECT rating FROM user_read WHERE user_id = %s AND book_id = %s", (user_id, book_id))
                    rating = c.fetchone()
                    conn.close()
                    rating = rating[0] if rating else None
                    keyboard = [
                        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data='list_action_delete_favorite'),
                         InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data='list_action_rate_favorite')],
                        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit_book_{book_id}'),
                         InlineKeyboardButton("üîç –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é", callback_data='back_to_select_favorite')],
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                    ]
                    await update.message.reply_photo(
                        photo=cover_url,
                        caption=f"**{title}**\n\n_{description}_\n\n*–ñ–∞–Ω—Ä—ã:* {genres}\n*–û—Ü–µ–Ω–∫–∞:* {rating_to_stars(rating)}",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    await update.message.reply_text("‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            except ValueError:
                await update.message.reply_text("‚ùå *–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            await msg.delete()
            context.user_data['state'] = None
        
        elif state == 'edit_book_select':
            msg = await update.message.reply_text("‚è≥ *–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏...*", parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(1)
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            c.execute("SELECT id, title FROM books WHERE id LIKE 'manual_%'", ())
            books = c.fetchall()
            conn.close()
            
            try:
                index = int(text) - 1
                if 0 <= index < len(books):
                    book_id = books[index][0]
                    context.user_data['edit_book_id'] = book_id
                    await update.message.reply_text("üìù –£–∫–∞–∂–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ):", parse_mode=ParseMode.MARKDOWN)
                    context.user_data['state'] = 'edit_book_description'
                else:
                    await update.message.reply_text("‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            except ValueError:
                await update.message.reply_text("‚ùå *–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            await msg.delete()
        
        elif state == 'edit_book_description':
            context.user_data['edit_description'] = text if text.lower() != '–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π' else None
            await update.message.reply_text("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ–±–ª–æ–∂–∫–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ):", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = 'edit_book_cover'
        
        elif state == 'edit_book_cover':
            msg = await update.message.reply_text("‚è≥ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏...*", parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(1)
            book_id = context.user_data['edit_book_id']
            new_description = context.user_data['edit_description']
            if update.message.photo:
                new_cover_url = update.message.photo[-1].file_id
            elif text.lower() == '–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π':
                new_cover_url = None
            else:
                await update.message.reply_text("üì∑ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π'.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
                await msg.delete()
                return
            
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            if new_description:
                c.execute("UPDATE books SET description = %s WHERE id = %s", (new_description, book_id))
            if new_cover_url:
                c.execute("UPDATE books SET cover_url = %s WHERE id = %s", (new_cover_url, book_id))
            conn.commit()
            conn.close()
            await update.message.reply_text("üìù *–ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            await msg.delete()
            context.user_data['state'] = None
        
        elif state == 'admin_broadcast_message' and user_id == ADMIN_ID:
            msg = await update.message.reply_text("‚è≥ *–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...*", parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(1)
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            c.execute("SELECT user_id FROM users WHERE agreed = 1 AND (banned_until IS NULL OR banned_until < %s)", (int(time.time()),))
            users = c.fetchall()
            conn.close()
            for uid in users:
                try:
                    await context.bot.send_message(chat_id=uid[0], text=text, parse_mode=ParseMode.MARKDOWN)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid[0]}: {e}")
            await update.message.reply_text("‚úâÔ∏è *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            await msg.delete()
            context.user_data['state'] = None
        
        elif state == 'admin_ban_id' and user_id == ADMIN_ID:
            try:
                ban_user_id = int(text)
                context.user_data['ban_user_id'] = ban_user_id
                await update.message.reply_text("‚è≥ –£–∫–∞–∂–∏ —Å—Ä–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7):", parse_mode=ParseMode.MARKDOWN)
                context.user_data['state'] = 'admin_ban_duration'
            except ValueError:
                await update.message.reply_text("‚ùå *–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
        
        elif state == 'admin_ban_duration' and user_id == ADMIN_ID:
            try:
                duration = int(text)
                context.user_data['ban_duration'] = duration
                await update.message.reply_text("üìù –£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", parse_mode=ParseMode.MARKDOWN)
                context.user_data['state'] = 'admin_ban_reason'
            except ValueError:
                await update.message.reply_text("‚ùå *–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
        
        elif state == 'admin_ban_reason' and user_id == ADMIN_ID:
            ban_user_id = context.user_data['ban_user_id']
            duration = context.user_data['ban_duration']
            reason = text
            ban_until = int(time.time()) + duration * 86400
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            c.execute("UPDATE users SET banned_until = %s, ban_reason = %s WHERE user_id = %s", (ban_until, reason, ban_user_id))
            conn.commit()
            conn.close()
            await update.message.reply_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ban_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {datetime.fromtimestamp(ban_until).strftime('%Y-%m-%d %H:%M:%S')} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: *{reason}*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
            await context.bot.send_message(chat_id=ban_user_id, text=f"üö´ *–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ {datetime.fromtimestamp(ban_until).strftime('%Y-%m-%d %H:%M:%S')}*\n*–ü—Ä–∏—á–∏–Ω–∞:* {reason}", parse_mode=ParseMode.MARKDOWN)
            context.user_data['state'] = None
        
        elif state == 'admin_unban_id' and user_id == ADMIN_ID:
            try:
                unban_user_id = int(text)
                conn = psycopg2.connect(DB_CONN_STRING)
                c = conn.cursor()
                c.execute("UPDATE users SET banned_until = 0, ban_reason = NULL WHERE user_id = %s", (unban_user_id,))
                conn.commit()
                conn.close()
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unban_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
                await context.bot.send_message(chat_id=unban_user_id, text="‚úÖ *–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!*", parse_mode=ParseMode.MARKDOWN)
                context.user_data['state'] = None
            except ValueError:
                await update.message.reply_text("‚ùå *–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
        
        elif state == 'admin_reset_user_id' and user_id == ADMIN_ID:
            try:
                reset_user_id = int(text)
                reset_database(reset_user_id)
                await update.message.reply_text(f"üóëÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {reset_user_id} —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
                context.user_data['state'] = None
            except ValueError:
                await update.message.reply_text("‚ùå *–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        await update.message.reply_text("‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)

# –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def read_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_user(update, context):
        await show_read(update.callback_query or update.message, context, page=1)

async def favorites_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_user(update, context):
        await show_favorites(update.callback_query or update.message, context, page=1)

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await check_user(update, context):
        await update.message.reply_text("üîç *–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:*", parse_mode=ParseMode.MARKDOWN)
        context.user_data['state'] = 'search_title'

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤
async def show_read(query, context, page):
    user_id = query.from_user.id if query.from_user else query.message.from_user.id
    logger.info(f"–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –¥–ª—è {user_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
    conn = psycopg2.connect(DB_CONN_STRING)
    c = conn.cursor()
    c.execute("SELECT b.id, b.title, ur.rating FROM user_read ur JOIN books b ON ur.book_id = b.id WHERE ur.user_id = %s", (user_id,))
    books = c.fetchall()
    conn.close()
    
    items_per_page = 10
    total_pages = (len(books) + items_per_page - 1) // items_per_page
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    
    if books:
        list_text = f"üìñ *–°–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):*\n"
        for i, (book_id, title, rating) in enumerate(books[start_idx:end_idx], start_idx + 1):
            list_text += f"{i}. {title} - {rating_to_stars(rating)}\n"
        keyboard = [
            [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data='list_action_rate_read'),
             InlineKeyboardButton("‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='list_action_move_read')],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data='list_action_delete_read'),
             InlineKeyboardButton("üîç –í—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É", callback_data='select_book_read')],
            [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç", callback_data='export_read')]
        ]
        if page > 1:
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'page_read_{page-1}')])
        if page < total_pages:
            keyboard[-1].append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f'page_read_{page+1}'))
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
        await (query.message.reply_text if query.from_user else query.edit_message_text)(list_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
    else:
        await (query.message.reply_text if query.from_user else query.edit_message_text)("üìñ *–°–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)

async def show_favorites(query, context, page):
    user_id = query.from_user.id if query.from_user else query.message.from_user.id
    logger.info(f"–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–ª—è {user_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
    conn = psycopg2.connect(DB_CONN_STRING)
    c = conn.cursor()
    c.execute("SELECT b.id, b.title FROM user_favorites uf JOIN books b ON uf.book_id = b.id WHERE uf.user_id = %s", (user_id,))
    books = c.fetchall()
    conn.close()
    
    items_per_page = 10
    total_pages = (len(books) + items_per_page - 1) // items_per_page
    start_idx = (page - 1) * items_per_page
    end_idx = start_idx + items_per_page
    
    if books:
        list_text = f"‚≠ê *–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):*\n"
        for i, (book_id, title) in enumerate(books[start_idx:end_idx], start_idx + 1):
            conn = psycopg2.connect(DB_CONN_STRING)
            c = conn.cursor()
            c.execute("SELECT rating FROM user_read WHERE user_id = %s AND book_id = %s", (user_id, book_id))
            rating = c.fetchone()
            conn.close()
            rating = rating[0] if rating else None
            list_text += f"{i}. {title} - {rating_to_stars(rating)}\n"
        keyboard = [
            [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data='list_action_rate_favorite'),
             InlineKeyboardButton("üìñ –î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", callback_data='list_action_move_favorite')],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data='list_action_delete_favorite'),
             InlineKeyboardButton("üîç –í—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É", callback_data='select_book_favorite')],
            [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç", callback_data='export_favorites')]
        ]
        if page > 1:
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'page_favorites_{page-1}')])
        if page < total_pages:
            keyboard[-1].append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f'page_favorites_{page+1}'))
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])
        await (query.message.reply_text if query.from_user else query.edit_message_text)(list_text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
    else:
        await (query.message.reply_text if query.from_user else query.edit_message_text)("‚≠ê *–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.*", reply_markup=main_menu(user_id), parse_mode=ParseMode.MARKDOWN)

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è (—Å —É—á—ë—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ UTC+3)
async def daily_recommendation(context: ContextTypes.DEFAULT_TYPE):
    conn = psycopg2.connect(DB_CONN_STRING)
    c = conn.cursor()
    c.execute("SELECT user_id FROM users WHERE agreed = 1 AND (banned_until IS NULL OR banned_until < %s)", (int(time.time()),))
    users = c.fetchall()
    conn.close()
    
    for user_id in users:
        user_id = user_id[0]
        conn = psycopg2.connect(DB_CONN_STRING)
        c = conn.cursor()
        c.execute("SELECT genres FROM books b JOIN user_favorites uf ON b.id = uf.book_id WHERE uf.user_id = %s", (user_id,))
        genres = [g[0] for g in c.fetchall()]
        conn.close()
        
        if genres:
            random_genre = random.choice(genres.split(','))
            book = await search_book_by_title_or_genre(random_genre, is_genre=True)
            if book:
                cache_book(book)
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=book['cover_url'],
                    caption=f"üìö *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*\n**{book['title']}**\n\n_{book['description']}_\n\n*–ñ–∞–Ω—Ä—ã:* {book['genres']}",
                    parse_mode=ParseMode.MARKDOWN
                )

def main():
    init_db()
    application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN', '8173510242:AAH0x9rsdU5Fv3aRJhlZ1zF_mdlSTFffHos')).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("read", read_command))
    application.add_handler(CommandHandler("favorites", favorites_command))
    application.add_handler(CommandHandler("search", search_command))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO | filters.TEXT, handle_message))
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ú–æ—Å–∫–≤—ã (UTC+3)
    moscow_time = time(hour=9, tzinfo=tzoffset(10800))  # 9 —É—Ç—Ä–∞ –ø–æ –ú–æ—Å–∫–≤–µ
    application.job_queue.run_daily(daily_recommendation, moscow_time)
    application.job_queue.run_daily(backup_database, time(hour=0, tzinfo=tzoffset(10800)))  # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø –≤ –ø–æ–ª–Ω–æ—á—å
    
    application.run_polling()

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –¥–ª—è –ú–æ—Å–∫–≤—ã
from datetime import tzinfo
class tzoffset(tzinfo):
    def __init__(self, offset):
        self._offset = timedelta(seconds=offset)
    def utcoffset(self, dt): return self._offset
    def tzname(self, dt): return "UTC+3"
    def dst(self, dt): return timedelta(0)

if __name__ == '__main__':
    main()
